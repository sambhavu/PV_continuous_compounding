#include <cmath>
#include <vector>
#include <iostream>
#include <string>
using namespace std;

class LP{
    public:
    
        const double ERROR = -1e30;
    
        vector<double> cash_flows;
        vector<double> times;
        double r;
    
        LP(); 
    
        double PV( 
                vector<double> cash_amounts,
                vector<double> cash_times,
                double r);
                
        double IRR(
                vector<double> cash_amounts,
                vector<double> cash_times);
                
        double PV_continuous(
                 vector<double> cash_amounts,
                 vector<double> cash_times,
                 double r);
};

LP :: LP(){
    
    cash_flows.push_back(-100.0);
    cash_flows.push_back(10.0);
    cash_flows.push_back(110.0);
    
    times.push_back(0.0);
    times.push_back(1.0);
    times.push_back(2.0);
    
    r = .05;
    
}
    


double LP ::  PV(       vector<double> cash_amounts,
                        vector<double> cash_times,
                        double r){
                    
    double PV = 0.0;
    
    for(int t = 0;t<cash_times.size(); t++){
        
        PV += cash_amounts[t]/pow((1.0+r),cash_times[t]);
    }
    return PV; 
}
    
double LP:: PV_continuous(
                            vector<double> cash_amounts,
                            vector<double> cash_times,
                            double r)
    { 
        double PV = 0.0;
        for( int t = 0; t<cash_times.size();t++){
            PV +=cash_amounts[t] * exp(-r*cash_times[t]);
        }
        return PV;
    }
    
double LP :: IRR(
                        vector<double> cash_amounts,
                        vector<double> cash_times){ 
                            
                            
    if(cash_times.size()!=cash_amounts.size()) return ERROR;
    const double ACCURACY = 1.0e-5;
    const int MAX_ITERATIONS = 50;
    
    double x1 = 0.0;
    double x2 = 0.2; 
    
    double f1 = PV(cash_flows,times,x1);
    double f2 = PV(cash_flows,times,x2);
    
    int i; 
    
    for(i=0;i<MAX_ITERATIONS;i++){
        if((f1*f2)<0.0){break;}
        if(fabs(f1)<fabs(f2)) { 
            f1 = PV(cash_flows,times,x1+=1.6*(x1-x2));
        }
        else{
            f2 = PV(cash_flows,times,x2 +=1.6*(x2-x1));
        };
    };
    
    
    if(f2*f1>0.0){return ERROR;};
    
    double f = PV(cash_flows,times,x1);
    double rtb;
    double dx = 0.0;
    
    if(f<0.0){
        rtb = x1;
        dx = x2-x1;
    }
    else { 
        rtb = x2;
        dx = x1-x2; 
    };
    
    for(i = 0; i<MAX_ITERATIONS;i++){
        dx *= .5; 
        double x_mid = rtb+dx;
        double f_mid = PV(cash_flows,times,x_mid);
        if(f_mid<=0.0) rtb = x_mid;
        if((fabs(f_mid)<ACCURACY || (fabs(dx)<ACCURACY))) return x_mid;
};
}
    
    
int main()
{   
    LP investment; 
    double presentvalue = investment.PV(investment.cash_flows,investment.times,investment.r);
    cout<<presentvalue;
    
    double irr; 
    irr  = investment.IRR(investment.cash_flows,investment.times);
    cout<<"\n"<<irr;
    
    return 0;
}
